"""empty message

Revision ID: dc09994b7e65
Revises: 
Create Date: 2023-04-12 14:50:25.281288

"""
from alembic import op
import sqlalchemy as sa
from datetime import datetime

from bazarr.app.database import TableHistory, TableHistoryMovie, TableBlacklist, TableBlacklistMovie, update

# revision identifiers, used by Alembic.
revision = 'dc09994b7e65'
down_revision = None
branch_labels = None
depends_on = None

bind = op.get_context().bind
insp = sa.inspect(bind)
session = sa.orm.Session(bind=bind)


def column_exists(table_name, column_name):
    columns = insp.get_columns(table_name)
    return any(c["name"] == column_name for c in columns)


def column_type(table_name, column_name):
    _type = [x['type'].python_type for x in insp.get_columns(table_name) if x['name'] == column_name]
    return _type[0] if _type else None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('table_shows') as batch_op:
        batch_op.alter_column(column_name='imdbId', server_default=None)
        if column_exists('table_shows', 'alternateTitles'):
            batch_op.alter_column(column_name='alternateTitles', new_column_name='alternativeTitles')
    with op.batch_alter_table('table_episodes') as batch_op:
        batch_op.alter_column(column_name='file_size', server_default='0')
        if column_exists('table_episodes', 'scene_name'):
            batch_op.alter_column(column_name='scene_name', new_column_name='sceneName')
    with op.batch_alter_table('table_movies') as batch_op:
        batch_op.alter_column(column_name='file_size', server_default='0')

    table_history_timestamp_altered = False
    with op.batch_alter_table('table_history') as batch_op:
        if column_type('table_history', 'score') == str:
            batch_op.alter_column(column_name='score', existing_type=sa.Text, type_=sa.Integer)
        if column_type('table_history', 'timestamp') == int:
            table_history_timestamp_altered = True
            batch_op.alter_column(column_name='timestamp', existing_type=sa.Integer, type_=sa.DateTime)
    with op.batch_alter_table('table_history') as batch_op:
        # must be run after alter_column as been committed
        if table_history_timestamp_altered:
            batch_op.execute(sa.text("UPDATE table_history SET timestamp = datetime(timestamp, 'unixepoch')"))

    table_history_movie_timestamp_altered = False
    with op.batch_alter_table('table_history_movie') as batch_op:
        if column_type('table_history_movie', 'score') == str:
            batch_op.alter_column(column_name='score', existing_type=sa.Text, type_=sa.Integer)
        if column_type('table_history_movie', 'timestamp') == int:
            table_history_movie_timestamp_altered = True
            batch_op.alter_column(column_name='timestamp', existing_type=sa.Integer, type_=sa.DateTime)
    with op.batch_alter_table('table_history_movie') as batch_op:
        # must be run after alter_column as been committed
        if table_history_movie_timestamp_altered:
            batch_op.execute(sa.text("UPDATE table_history_movie SET timestamp = datetime(timestamp, 'unixepoch')"))

    table_blacklist_timestamp_altered = False
    with op.batch_alter_table('table_blacklist') as batch_op:
        if column_type('table_blacklist', 'timestamp') == int:
            table_blacklist_timestamp_altered = True
            batch_op.alter_column(column_name='timestamp', existing_type=sa.Integer, type_=sa.DateTime)
    with op.batch_alter_table('table_blacklist') as batch_op:
        # must be run after alter_column as been committed
        if table_blacklist_timestamp_altered:
            batch_op.execute(sa.text("UPDATE table_blacklist SET timestamp = datetime(timestamp, 'unixepoch')"))

    table_blacklist_movie_timestamp_altered = False
    with op.batch_alter_table('table_blacklist_movie') as batch_op:
        if column_type('table_blacklist_movie', 'timestamp') == int:
            table_blacklist_movie_timestamp_altered = True
            batch_op.alter_column(column_name='timestamp', existing_type=sa.Integer, type_=sa.DateTime)
    with op.batch_alter_table('table_blacklist_movie') as batch_op:
        # must be run after alter_column as been committed
        if table_blacklist_movie_timestamp_altered:
            batch_op.execute(sa.text("UPDATE table_blacklist_movie SET timestamp = datetime(timestamp, 'unixepoch')"))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
